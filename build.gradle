buildscript {
	repositories {
		jcenter()
	}
	dependencies {
		// applies the Eclipse java formatter
		classpath "com.diffplug.gradle.spotless:spotless:${VER_SPOTLESS}"
	}
}

repositories {
	mavenCentral()
	ivy {
		// There isn't a reliable way to get eclipse artifacts except through p2 repositories,
		// which gradle does not yet support.  For now we're forcing it with ivy.
		url UPDATE_SITE
		layout "pattern", {
			artifact "plugins/[artifact]_[revision].[ext]"
		}
	}
	// SNAPSHOT versions are free to rely on other SNAPSHOT libraries
	if (project.version.endsWith('-SNAPSHOT')) {
		maven {
			url 'https://oss.sonatype.org/content/repositories/snapshots/'
		}
		configurations.all {
			resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
		}
	}
}

//////////
// JAVA //
//////////
apply plugin: 'java'
sourceSets {
	main { java {
			srcDir 'src'
	} }
	test { java {
			srcDir 'test'
	} }
}
sourceCompatibility = VER_JAVA
targetCompatibility = VER_JAVA

dependencies {
	compile "com.diffplug.durian:durian-rx:${VER_DURIAN_RX}"
	compile "com.diffplug.durian:durian:${VER_DURIAN}"
	compile "com.google.guava:guava:${VER_GUAVA}"
	compile "io.reactivex:rxjava:${VER_RXJAVA}"

	compile "p2:org.eclipse.swt:${VER_SWT}"
	compile "p2:org.eclipse.jface:${VER_JFACE}"
	compile "p2:org.eclipse.swt.${com.diffplug.common.swt.os.SwtPlatform.getRunning()}:${VER_SWT_PLATFORM}"

	testCompile "junit:junit:${VER_JUNIT}"
}

jar.manifest {
	from 'META-INF/MANIFEST.MF'
}

/////////////////////////
// INTERACTIVE TESTING //
/////////////////////////

// standard `gradlew test` will autoclose after 500ms
test {
	systemProperty 'com.diffplug.test.autoclose.milliseconds', '500'
	useJUnit {
		// there are some tests that can't pass without a user, so we'll exclude them
		excludeCategories 'com.diffplug.common.swt.InteractiveTest$FailsWithoutUser'
		// SWT tests don't work in gradle on OS X (https://github.com/ReadyTalk/swt-bling/issues/4)
		if (com.diffplug.common.swt.os.OS.getNative().isMac()) {
			excludeCategories 'com.diffplug.common.swt.InteractiveTest'
		}
	}
	// log all test events
	testLogging {
		events "failed", "passed", "skipped", "standard_error", "standard_out", "started"
	}
}

// only run the interactive tests
task interactiveTest(type: Test) {
	systemProperty 'com.diffplug.test.autoclose.milliseconds', null
	useJUnit {
		includeCategories 'com.diffplug.common.swt.InteractiveTest'
	}
}

/////////////
// ECLIPSE //
/////////////
apply plugin: 'eclipse'
eclipse {
	project {
		natures 'org.eclipse.pde.PluginNature'
		natures 'org.eclipse.jdt.core.javanature'

		buildCommand 'org.eclipse.jdt.core.javabuilder'
		buildCommand 'org.eclipse.pde.ManifestBuilder'
		buildCommand 'org.eclipse.pde.SchemaBuilder'
	}
	classpath {
		downloadSources true
		downloadJavadoc true
	}
	jdt {
		sourceCompatibility VER_JAVA
		targetCompatibility VER_JAVA
	}
}
// always create fresh projects
tasks.eclipse.dependsOn(cleanEclipse)

////////////
// FORMAT //
////////////
apply plugin: 'com.diffplug.gradle.spotless'
spotless {
	java {
		licenseHeaderFile	'spotless.license.java'			// License header file
		importOrderFile		'spotless.importorder'			// An import ordering file, exported from Eclipse
		eclipseFormatFile	'spotless.eclipseformat.xml'	// XML file dumped out by the Eclipse formatter
		// Eclipse formatter puts excess whitespace after lambda blocks
		//    funcThatTakesLambdas(x -> {} , y -> {} )	// what Eclipse does
		//    funcThatTakesLambdas(x -> {}, y -> {})	// what I wish Eclipse did
		custom 'Lambda fix', { it.replace('} )', '})').replace('} ,', '},') }
	}
	format 'misc', {
		target '**/.gitignore', '**/*.gradle', '**/*.md', '**/*.sh'
		indentWithTabs()
		trimTrailingWhitespace()
		endWithNewline()
	}
}

//////////////
// FINDBUGS //
//////////////
apply plugin: 'findbugs'
findbugs {
	toolVersion = VER_FINDBUGS
	sourceSets = [sourceSets.main]	// don't check the test code
	ignoreFailures = false 	// bug free or it doesn't ship!
	reportsDir = file('build/findbugs')
	effort = 'max'			// min|default|max
	reportLevel = 'low'		// low|medium|high (low = sensitive to even minor mistakes)
	omitVisitors = []		// bugs that we want to ignore
}
// HTML instead of XML
tasks.withType(FindBugs) {
	reports {
		xml.enabled = false
		html.enabled = true
	}
}
// we'll want the findbugs annotations (they don't have a 3.0.1 version)
dependencies {
	compile 'com.google.code.findbugs:annotations:3.0.0'
	compile 'com.google.code.findbugs:jsr305:3.0.0'
}

///////////
// MAVEN //
///////////
apply plugin: 'maven-publish'

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allJava
}

// Where it's possible to name parameters and methods clearly enough
// that javadoc is not necessary, why make the code bigger?
//
// Thus, no javadoc warnings.
javadoc {
	options.addStringOption('Xdoclint:none', '-quiet')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			artifact sourcesJar
			artifact javadocJar
			pom.withXml {
				// don't force our weird p2 ivy/p2 solution on our users
				asNode().dependencies.'*'.each() {
					if (it.groupId.text() == 'p2') {
						it.parent().remove(it)
					}
				}
				// findbugs annotations should have scope "provided"
				asNode().dependencies.'*'.findAll() { it.groupId.text() == 'com.google.code.findbugs' }.each() { it.scope*.value = 'provided' }
				// add MavenCentral requirements to the POM
				asNode().children().last() + {
					resolveStrategy = Closure.DELEGATE_FIRST
					name project.name
					description project.description
					url "https://github.com/${project.org}/${project.name}"
					scm {
						url "https://github.com/${project.org}/${project.name}"
						connection "scm:git:git://github.com/${project.org}/${project.name}"
						developerConnection "scm:git:ssh:git@github.com/${project.org}/${project.name}"
					}
					licenses {
						license {
							name 'The Apache Software License, Version 2.0'
							url 'http://www.apache.org/license/LICENSE-2.0.txt'
							distribution 'repo'
						}
					}
					developers {
						developer {
							id 'nedtwigg'
							name 'Ned Twigg'
							email 'ned.twigg@diffplug.com'
						}
					}
				}
			}
		}
	}
	repositories {
		maven {
			def isSnapshot = project.version.endsWith('-SNAPSHOT')
			if (isSnapshot) {
				url = 'https://oss.sonatype.org/content/repositories/snapshots'
			} else {
				url = "https://api.bintray.com/maven/diffplug/opensource/${project.name}"
			}
			credentials {
				username = System.env[isSnapshot ? 'nexus_user' : 'bintray_user']
				password = System.env[isSnapshot ? 'nexus_pass' : 'bintray_pass']
			}
		}
	}
}

// helps external scripts detect version
task printVersion << {
	println version
}
